// Include the JNI (Java Native Interface) header file. This provides the necessary functions and types to interact with Java from C++.
#include <jni.h>

// Include the C string library for string manipulation functions like strlen.
#include <cstring>

// Include the header file generated by the 'javah' tool for the HelloWorld class. This file contains the function signature for the native method.
#include "HelloWorld.h"

// Define the native method that will be called from Java.
// The 'JNIEXPORT' and 'JNICALL' macros are used to ensure the function is exported correctly and uses the correct calling convention.
// 'JNIEXPORT' is a macro that ensures the function is exported correctly for use by the JVM.
// 'JNICALL' is a macro that specifies the calling convention for the function (how parameters are passed and how the stack is cleaned up).
JNIEXPORT jbyteArray JNICALL Java_HelloWorld_getBytes(JNIEnv *env, jobject) {
    // 'JNIEnv *env' is a pointer to a structure that contains a table of function pointers.
    // These functions allow interaction with the JVM, such as creating objects, calling methods, and accessing fields.
    // 'jobject' is a reference to the Java object that called this native method. In this case, it is an instance of the HelloWorld class.
    
    // Define a C-style string (null-terminated array of characters) containing the message we want to return to Java.
    const char* message = "Hello, World from C++!";
    
    // Calculate the length of the message string using the strlen function.
    // 'strlen' is a function from the C string library that returns the length of a null-terminated string (excluding the null terminator).
    jsize len = strlen(message);
    
    // Create a new Java byte array (jbyteArray) with the same length as the message string.
    // 'jbyteArray' is a JNI type that represents a Java byte array (byte[] in Java).
    // The 'NewByteArray' function allocates a new byte array in the Java heap.
    // Parameters:
    // - len: the length of the new byte array.
    jbyteArray byteArray = env->NewByteArray(len);
    
    // Copy the contents of the C string (message) into the newly created Java byte array.
    // The 'SetByteArrayRegion' function copies a region of a C array into a Java array.
    // Parameters:
    // - byteArray: the Java byte array to copy into.
    // - 0: the starting position in the Java array to begin copying.
    // - len: the number of bytes to copy.
    // - reinterpret_cast<const jbyte*>(message): the source C array, cast to the appropriate type (jbyte*).
    // 'reinterpret_cast' is a C++ operator used to convert one pointer type to another.
    // In this case, it converts a 'const char*' to a 'const jbyte*'.
    env->SetByteArrayRegion(byteArray, 0, len, reinterpret_cast<const jbyte*>(message));
    
    // Return the Java byte array to the caller.
    // The returned 'jbyteArray' can be used in Java as a byte[].
    return byteArray;
}
